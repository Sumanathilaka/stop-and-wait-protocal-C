CLIENT SIDE:
 
        getting IP address:
        get the ip address by receiving the host_name:
        		check whether the host_name is null or not
        			if ((he = gethostbyname (hostname) ) == NULL) 
        				if null,return error:
        			else 	 copy the ip_address to ip
        			   	 using strcpy(ip, inet_ntoa (*addr_list[i]));
	1)get socket  by clientSocket = socket(PF_INET, SOCK_DGRAM, 0);
		
	2)Initialise  client struct sockaddr_in:
        3)make connection with client_server  
        4)create a struct for time(for the sake of timeout) and for packet.
	  and set the timer
       5)scan the number of packets,and set the values of PACKET_STRUCTURE .
		
        6) set the flagish_flag to 1 at last packet:
        		
        7)send the packet one by one to the server in the loop
        		
        8)check the value of ACK received,:recvfrom(clientSocket, &ack, sizeof(int), 0, NULL, NULL)
        		if (ack==-1)
        			TIME-OUT
        			retransmit the same packet
        		else 
        			check the ack value,if it is the previous seq.no,continue with next
        					    else retransmit the same packet
        9) send the finish flag at last to the server:
        10)free the buffer used:
			
	


SERVER SIDE:
	
	create a packet structure with:
			char data[100];
  			int seqno;
  			int flag;
			
	getting IP address:

	1)get socket  by  welcomeSocket = socket(PF_INET, SOCK_DGRAM, 0);
		
	2)Initialise  client struct sockaddr_in:
			
			
    			
	3)bind the socket:
			
	4) run the inflagity loop,receive the packets into the buffer
	5)check the finish flag:if (buffer[i].flag == 1) break the loop.
	
 	6)ask for simulating packet loss
            7) simulating ack loss
        		
	
	8)print the packets received;
	
	9) return 0
	


